package bullet;

import java.util.Vector;

import javax.swing.JFrame;
import SpriteSheet.SpriteSheet;
import lombok.Data;

@Data

public class BulletControl {
	private final static String TAG = "BulletControl : ";
	
	private JFrame app;
	private Vector<Bullet> bullets = new Vector<Bullet>();
	private boolean delayBullet = false;
	
	public BulletControl(JFrame app) {
		this.app = app;
		
		// 불릿 움직이는 스레드
		new Thread(new Runnable() {
			@Override
			public void run() {
				while(true) {
					if(bullets.size() != 0) {
						for (int i = 0; i < bullets.size(); i++) {
							if(bullets.get(i).getDirect() == 1) {	// 보는 방향이 아래
								bullets.get(i).setYBullet(bullets.get(i).getYBullet() + 1);
							} else if(bullets.get(i).getDirect() == 2) {	// 보는 방향이 왼쪽
								bullets.get(i).setXBullet(bullets.get(i).getXBullet() - 1);
							} else if(bullets.get(i).getDirect() == 3) {	// 보는 방향이 위쪽
								bullets.get(i).setYBullet(bullets.get(i).getYBullet() - 1);
							} else {	// 보는 방향 오른쪽
								bullets.get(i).setXBullet(bullets.get(i).getXBullet() + 1);
							}
							bullets.get(i).getSsBullet().drawObject(bullets.get(i).getXBullet(), bullets.get(i).getYBullet());
						}
						try {
							Thread.sleep(5);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
			}
		}).start();
		// 불릿 충돌시 지우기
		new Thread(new Runnable() {
			@Override
			public void run() {
				while(true) {
					if(bullets.size() != 0) {
						wallCollison();
						removeBullet();
					}
				}
			}
		}).start();
	}
	
	public void addBullet(String gubun, double attackDamage, int direct, int xBullet, int yBullet) {
		if(!delayBullet) {
			System.out.println(delayBullet);
			if(direct == 1) {	// 보는 방향이 아래
				bullets.add(new Bullet(gubun, attackDamage, direct, xBullet + 6, yBullet + 18));
			} else if(direct == 2) {	// 보는 방향이 왼쪽
				bullets.add(new Bullet(gubun, attackDamage, direct, xBullet - 13, yBullet + 8));
			} else if(direct == 3) {	// 보는 방향이 위
				bullets.add(new Bullet(gubun, attackDamage, direct, xBullet + 6, yBullet - 14));
			} else {	// 보는 방향이 오른쪽
				bullets.add(new Bullet(gubun, attackDamage, direct, xBullet + 26, yBullet + 8));
			}
			drawBullet();
			// 불릿을 쏘고 난뒤 다시 쏠수 있도록 바꾸는 부분
			new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						delayBullet = true;
						Thread.sleep(300);
						delayBullet = false;
					} catch (InterruptedException e) {
						e.printStackTrace();
					}					
				}
			}).start();;
		}
	}
	public void drawBullet() {
		if(bullets.size() != 0) {
			for (int i = 0; i < bullets.size(); i++) {
				app.add(bullets.get(i).getSsBullet(),0);
				bullets.get(i).getSsBullet().drawObject(bullets.get(i).getXBullet(), bullets.get(i).getYBullet());
			}
		}
	}
	
	public void removeBullet() {
		for (int i = 0; i < bullets.size(); i++) {
			if(bullets.get(i).isCollide()) {
				app.remove(bullets.get(i).getSsBullet());
				bullets.remove(i);
			}
		}
	}
	
	public void removingMotion() {
		
	}
	
	public void wallCollison() {
		for (int i = 0; i < bullets.size(); i++) {
			if(bullets.get(i).getXBullet() < 130 || bullets.get(i).getXBullet() > 820 || bullets.get(i).getYBullet() < 100 || bullets.get(i).getYBullet() > 500) {
				bullets.get(i).setCollide(true);
			}
		}
	}
//	public void closeEye(int viewDirect) {
//		switch (viewDirect) {
//		case 1:	// 보는 방향 아래
//			ssHead.setXPos(IsaacSize.HEADWIDTH + Gap.COLUMNGAP);
//			break;
//		case 2:	// 보는 방향 왼쪽
//			ssHead.setXPos(IsaacSize.HEADWIDTH * 7 + Gap.COLUMNGAP * 7);
//			break;
//		case 3:	// 보는 방향 위
//			ssHead.setXPos(IsaacSize.HEADWIDTH * 5 + Gap.COLUMNGAP * 5);
//			break;
//		case 4:	// 보는 방향 오른쪽
//			ssHead.setXPos(IsaacSize.HEADWIDTH * 3 + Gap.COLUMNGAP * 3);
//			break;
//		}
//	}
//	public void openEye(int viewDirect) {
//		switch (viewDirect) {
//		case 1:	// 보는 방향 아래
//			ssHead.setXPos(0);
//			break;
//		case 2:	// 보는 방향 왼쪽
//			ssHead.setXPos(IsaacSize.HEADWIDTH * 6 + Gap.COLUMNGAP * 6);
//			break;
//		case 3:	// 보는 방향 위
//			ssHead.setXPos(IsaacSize.HEADWIDTH * 4 + Gap.COLUMNGAP * 4);
//			break;
//		case 4:	// 보는 방향 오른쪽
//			ssHead.setXPos(IsaacSize.HEADWIDTH * 2 + Gap.COLUMNGAP * 2);
//			break;
//		}
//	}
	
	// 구현되야 하는 것들
	// 몹 충돌
	// 구조물 충돌
}
